%HW6

% Problem 1. Curve fitting. 
% Part 1. Take 10 x values on the interval 0 < x <= 10 and then create y
% values from the x values by plugging the x values into a third order
% polynomial of your choice. Add random noise to the data by choosing a random number
% in the interval [-D, D]. Start with D = 1. Plot your data in the x-y plane.

x=1:10;
for ii=1:10
d=datasample(-1:1,1,'Replace',false);
y=x.^3+2.*(x-d).^2+0.5.*x+3*d;
end
plot(x,y,'r.','MarkerSize',22);

% Part 2. Fit your data with polynomials from order 1 to 9. Plot the fitted
% polynomials together with the data. 

[coeff]=polyfit(x,y,1);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,2);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,3);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,4);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,5);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,6);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,7);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,8);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,9);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

% Part 3. On a separate plot, plot the R^2 and adjusted R^2 as a function
% of the order of the polynomial. 

r2=zeros(9,1);
r2adj=zeros(9,1);

[fit1,SSs]=fit(x',y','poly1'); %#ok<ASGLU>
r2(1,1)=[SSs.rsquare];
r2adj(1,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly2'); %#ok<ASGLU>
r2(2,1)=[SSs.rsquare];
r2adj(2,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly3'); %#ok<ASGLU>
r2(3,1)=[SSs.rsquare];
r2adj(3,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly4'); %#ok<ASGLU>
r2(4,1)=[SSs.rsquare];
r2adj(4,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly5'); %#ok<ASGLU>
r2(5,1)=[SSs.rsquare];
r2adj(5,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly6'); %#ok<ASGLU>
r2(6,1)=[SSs.rsquare];
r2adj(6,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly7'); %#ok<ASGLU>
r2(7,1)=[SSs.rsquare];
r2adj(7,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly8'); %#ok<ASGLU>
r2(8,1)=[SSs.rsquare];
r2adj(8,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly9'); %#ok<ASGLU>
r2(9,1)=[SSs.rsquare];
r2adj(9,1)=[SSs.adjrsquare];

plot(1:9,r2,'r.-'); hold on; plot(1:9,r2adj,'b.-');
text([6 6],[0.88 0.9],{'r^2 red','r^2 adjusted blue'});

% Part 4. Repeat parts 1 - 3 for D = 10 and D = 1000. Comment on the
% results. 

%for D=10,

x=1:10;
for ii=1:10
d=datasample(-10:10,10,'Replace',false);
y=x.^3+2.*(x-d).^2+0.5.*x+3*d;
end
plot(x,y,'r.','MarkerSize',22);

[coeff]=polyfit(x,y,1);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,2);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,3);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,4);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,5);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,6);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,7);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,8);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,9);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

%for R2 and R2 adj

r2=zeros(9,1);
r2adj=zeros(9,1);

[fit1,SSs]=fit(x',y','poly1'); %#ok<ASGLU>
r2(1,1)=[SSs.rsquare];
r2adj(1,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly2'); %#ok<ASGLU>
r2(2,1)=[SSs.rsquare];
r2adj(2,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly3'); %#ok<ASGLU>
r2(3,1)=[SSs.rsquare];
r2adj(3,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly4'); %#ok<ASGLU>
r2(4,1)=[SSs.rsquare];
r2adj(4,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly5'); %#ok<ASGLU>
r2(5,1)=[SSs.rsquare];
r2adj(5,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly6'); %#ok<ASGLU>
r2(6,1)=[SSs.rsquare];
r2adj(6,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly7'); %#ok<ASGLU>
r2(7,1)=[SSs.rsquare];
r2adj(7,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly8'); %#ok<ASGLU>
r2(8,1)=[SSs.rsquare];
r2adj(8,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly9'); %#ok<ASGLU>
r2(9,1)=[SSs.rsquare];
r2adj(9,1)=[SSs.adjrsquare];

plot(1:9,r2,'r.-'); hold on; plot(1:9,r2adj,'b.-');
text([6 6],[0.8 0.9],{'r^2 red','r^2 adjusted blue'});


%Just by adding a -10:10 noise creates a low fit for the first order,
%however, the second order gets better, near 0.95, and the highest we go is
%up to 0.99 with the 8th polynomial, however we get a really good fit since
%the second order, almost the same as the 3rd, so we don't really need to
%go any further


%for D=100,

x=1:10;
for ii=1:10
d=datasample(-100:100,10,'Replace',false);
y=x.^3+2.*(x-d).^2+0.5.*x+3*d;
end
plot(x,y,'r.','MarkerSize',22);

[coeff]=polyfit(x,y,1);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,2);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,3);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,4);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,5);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,6);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,7);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,8);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

[coeff]=polyfit(x,y,9);
plot(x,y,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3);

%for fitting with R2 and R2 adj

r2=zeros(9,1);
r2adj=zeros(9,1);

[fit1,SSs]=fit(x',y','poly1'); %#ok<ASGLU>
r2(1,1)=[SSs.rsquare];
r2adj(1,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly2'); %#ok<ASGLU>
r2(2,1)=[SSs.rsquare];
r2adj(2,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly3'); %#ok<ASGLU>
r2(3,1)=[SSs.rsquare];
r2adj(3,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly4'); %#ok<ASGLU>
r2(4,1)=[SSs.rsquare];
r2adj(4,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly5'); %#ok<ASGLU>
r2(5,1)=[SSs.rsquare];
r2adj(5,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly6'); %#ok<ASGLU>
r2(6,1)=[SSs.rsquare];
r2adj(6,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly7'); %#ok<ASGLU>
r2(7,1)=[SSs.rsquare];
r2adj(7,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly8'); %#ok<ASGLU>
r2(8,1)=[SSs.rsquare];
r2adj(8,1)=[SSs.adjrsquare];

[fit1,SSs]=fit(x',y','poly9'); %#ok<ASGLU>
r2(9,1)=[SSs.rsquare];
r2adj(9,1)=[SSs.adjrsquare];

plot(1:9,r2,'r.-'); hold on; plot(1:9,r2adj,'b.-');
text([6 6],[0.8 0.9],{'r^2 red','r^2 adjusted blue'});

%well this is interesting, so for the R^2 we have really poor values until
%we get to the polynomial 8 and 9, where they become good fits, However,
%Matlab throws the warning of a bad condition. Now, the R^2 adjusted it's
%just messed up because it even contains negative values and for the 9th
%polynomial we get a NaN. 


% Part 5. Now repeat parts 1-3 but take 100 x values on the interval 0 < x <=
% 10. Comment on the results. 

x=datasample(1:10,100);
for ii=1:100
d=datasample(-100:100,100);
y=x.^3+2.*(x-d).^2+0.5.*x+3*d;
end
plot(x,y,'r.','MarkerSize',22);

%for fitting with R2 and R2 adj

[fit1,SSs]=fit(x',y','poly1'); %#ok<ASGLU>
r2=[SSs.rsquare];
r2adj=[SSs.adjrsquare];

[coeff]=polyfit(x,y*r2,1);
plot(x,y*r2,'r.','MarkerSize',22); 
hold on; plot(x,polyval(coeff,x),'k.-','LineWidth',3); 
[coeff]=polyfit(x,y*r2adj,1);
hold on; plot(x,polyval(coeff,x),'b.-','LineWidth',3); 
text([5 5],[300 400],{'r^2 black','r^2 adjusted blue'});


% Problem 2. Basic statistics. 
% Part 1. Consider two different distributions - Gaussian numbers with a mean of
% 0 and variance 1 and Gaussian numbers with a mean of 1 and variance 1.
% (1) Make a plot of the average p-value for the t-test comparing N random
% numbers chosen from each of these two distributions as a function of N.

N=10;
d1=normrnd(0,1,N);
d2=normrnd(1,1,N);

figure (1); histogram(d1); hold on; histogram(d2);
[sig,pval]=ttest2(d1,d2);

figure (2); plot(1:10,pval);

% Part 2. Now keep the first distribution the same, but vary the mean of
% the second distribution between 0 and 10 with the same variance and
% repeat part one. Make a plot of all of these different curves on the same
% set of axes. What is special about the case where the mean of the second
% distribution is 0? 

store=zeros(11,10);
for ii=0:10
N=10;
d1=normrnd(0,1,N);
d2=normrnd(ii,1,N);

figure (3); histogram(d1); hold on; histogram(d2);
[sig,pval]=ttest2(d1,d2);
store(ii+1,:)=pval;

end
avstore=mean(store');
figure (4); plot(0:10,avstore,'Linewidth',4);
xlabel('Mean in the second distribution');
ylabel('P values');

%at ii=0, distrubution 2 is the same as distribution 1, so they have much 
%in common, the further you increase the mean, the more wide apart it
%becomes from 1 that is why you get pvalues near zero. 

% Part 3. Now keep the means of the two distributions at 0 and 1 as in part
% 1, but vary the variance of both distributions simultaneiously between 0.1 and 10 and plot the 
% p-values vs the number of numbers drawn as before. Comment on your results.  

store=zeros(10);
Nstore=zeros(10,1);

for ii=1:10
N=(10-0.1).*rand(1);
d1=normrnd(0,N,10);
d2=normrnd(1,N,10);

figure (5); histogram(d1); hold on; histogram(d2);
[sig,pval]=ttest2(d1,d2);
store(ii,:)=pval;
Nstore(ii)=N;
end

avstore=mean(store);
figure (6); plot(sort(Nstore),avstore,'Linewidth',4);
xlabel('Variance');
ylabel('P values');

%Since the variance has a wide range, from 0.1 to 10, we will get different
%P values, meaning that sometimes both datasets will be significant from
%each other and sometimes they won't.
